<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>AI Design Generator</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/emailjs-com@3/dist/email.min.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* === AUTHENTICATION === */
    .auth-container {
      background: white;
      border-radius: 20px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.2);
      overflow: hidden;
      width: 100%;
      max-width: 450px;
      margin: 20px;
    }
    .auth-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 40px 30px;
      text-align: center;
    }
    .auth-header h1 {
      font-size: 2.2em;
      margin-bottom: 10px;
      font-weight: 300;
    }
    .auth-header p {
      opacity: 0.9;
      font-size: 1.1em;
    }
    .auth-content {
      padding: 40px 30px;
    }
    .form-group {
      margin-bottom: 25px;
    }
    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
      color: #333;
    }
    .form-group input, .form-group select {
      width: 100%;
      padding: 15px;
      border: 2px solid #e1e5e9;
      border-radius: 10px;
      font-size: 16px;
      transition: border-color 0.3s, box-shadow 0.3s;
    }
    .form-group input:focus, .form-group select:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    .btn {
      width: 100%;
      padding: 15px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 10px;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      transition: transform 0.2s, box-shadow 0.2s;
    }
    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
    }
    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }
    .btn-secondary {
      background: #6c757d;
      margin-top: 10px;
    }
    .btn-code, .btn-add-spec, .btn-add-value {
      width: auto;
      padding: 10px 20px;
      margin-left: 10px;
      font-size: 14px;
    }
    .message {
      padding: 12px;
      border-radius: 8px;
      margin: 15px 0;
      text-align: center;
      font-weight: 500;
    }
    .message.error {
      background: #ffebee;
      color: #c62828;
      border: 1px solid #ffcdd2;
    }
    .message.success {
      background: #e8f5e8;
      color: #2e7d32;
      border: 1px solid #c8e6c9;
    }
    .message.info {
      background: #e3f2fd;
      color: #1976d2;
      border: 1px solid #bbdefb;
    }
    .switch-link {
      text-align: center;
      margin-top: 25px;
      padding-top: 25px;
      border-top: 1px solid #e1e5e9;
    }
    .switch-link a {
      color: #667eea;
      text-decoration: none;
      font-weight: 500;
    }
    .switch-link a:hover {
      text-decoration: underline;
    }
    .code-input-group {
      display: flex;
      align-items: center;
    }
    .code-input-group input {
      flex: 1;
    }
    .code-display, .product-display, .prompt-display {
      background: #e3f2fd;
      border: 2px solid #bbdefb;
      padding: 15px;
      border-radius: 10px;
      margin: 15px 0;
      text-align: center;
      font-size: 18px;
      font-weight: 500;
      color: #1976d2;
      position: relative;
      display: none;
    }
    .code-display.show, .product-display.show, .prompt-display.show {
      display: block;
    }
    .code-display span {
      font-family: monospace;
      font-size: 20px;
    }
    .code-display button {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      background: #667eea;
      color: white;
      border: none;
      padding: 8px 15px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 14px;
    }
    .code-display button:hover {
      background: #5a6cd1;
    }
    .hidden {
      display: none !important;
    }
    .spec-group {
      border: 1px solid #e1e5e9;
      border-radius: 10px;
      padding: 15px;
      margin-bottom: 15px;
      background: #f8f9fa;
    }
    .spec-group .form-group {
      margin-bottom: 15px;
    }
    .value-group {
      margin-left: 20px;
      margin-bottom: 10px;
    }
    .value-group input {
      margin-bottom: 5px;
    }

    /* === MAIN APP === */
    .main-app {
      display: none;
      min-height: 100vh;
      width: 100%;
      background: #f8f9fa;
    }
    .main-app.show {
      display: block;
    }
    .app-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .app-header h1 {
      font-size: 1.8em;
      font-weight: 300;
    }
    .nav-links a {
      color: white;
      margin-left: 20px;
      text-decoration: none;
      font-weight: 500;
    }
    .nav-links a:hover {
      text-decoration: underline;
    }
    .logout-btn {
      padding: 10px 20px;
      background: rgba(255,255,255,0.2);
      border: 1px solid rgba(255,255,255,0.3);
      color: white;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    .logout-btn:hover {
      background: rgba(255,255,255,0.3);
    }
    .app-content {
      max-width: 1200px;
      margin: 0 auto;
      padding: 30px 20px;
    }
    .controls {
      background: white;
      border-radius: 15px;
      padding: 30px;
      box-shadow: 0 5px 20px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    .row {
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
      margin-bottom: 25px;
      align-items: end;
    }
    .row > * {
      flex: 1;
      min-width: 200px;
    }
    .controls textarea, .controls input, .controls select {
      padding: 12px;
      font-size: 14px;
      border: 2px solid #e1e5e9;
      border-radius: 8px;
      transition: border-color 0.3s;
    }
    .controls textarea:focus, .controls input:focus, .controls select:focus {
      outline: none;
      border-color: #667eea;
    }
    .controls textarea {
      width: 100%;
      height: 120px;
      resize: vertical;
      font-family: inherit;
    }
    .controls label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
      color: #333;
    }

    /* === FIXED BUTTON CONTAINER === */
    .button-container {
      display: flex;
      justify-content: center;
      margin: 35px 0;
      width: 100%;
    }
    .generate-btn {
      background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
      color: white;
      border: none;
      padding: 16px 36px;
      font-size: 17px;
      font-weight: 600;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s;
      box-shadow: 0 5px 15px rgba(17, 153, 142, 0.3);
    }
    .generate-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(17, 153, 142, 0.4);
    }
    .generate-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    /* === NEW IMAGE LAYOUT === */
    .generated-images-container {
      display: flex;
      flex-direction: column;
      gap: 20px;
      margin-top: 30px;
    }
    .image-pair {
      display: flex;
      gap: 20px;
      justify-content: center;
      flex-wrap: wrap;
    }
    .image-pair img {
      width: 100%;
      max-width: 380px;
      height: auto;
      border-radius: 12px;
      box-shadow: 0 5px 20px rgba(0,0,0,0.1);
      opacity: 0.5;
      transition: opacity 0.5s;
    }
    .image-pair img.loaded {
      opacity: 1;
    }
    .image-pair div {
      text-align: center;
      font-weight: 500;
      color: #333;
      margin-top: 10px;
    }
    .feedback-buttons {
      display: flex;
      gap: 12px;
      justify-content: center;
      flex-wrap: wrap;
    }
    .feedback-buttons button {
      padding: 12px 24px;
      font-size: 15px;
      font-weight: 500;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s;
      border: none;
    }
    .feedback-buttons .btn-like-this {
      background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
      color: white;
    }
    .feedback-buttons .btn-like-that {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }
    .feedback-buttons .btn-both-bad {
      background: #ef4444;
      color: white;
    }
    .feedback-buttons button:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    /* === PRODUCT WARNING === */
    .product-warning {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: #ef4444;
      color: white;
      padding: 16px 20px;
      border-radius: 12px;
      box-shadow: 0 10px 30px rgba(239, 68, 68, 0.4);
      z-index: 1000;
      display: none;
      animation: pulse 2s infinite;
      max-width: 300px;
    }
    .product-warning.show {
      display: block;
    }
    .product-warning a {
      color: #fef3c7;
      text-decoration: underline;
    }
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.8; }
    }

    /* === MOBILE FIXES === */
    @media (max-width: 768px) {
      .row { flex-direction: column; }
      .row > * { min-width: unset; }
      .app-header { flex-direction: column; gap: 15px; text-align: center; }
      .controls { padding: 20px; }
      .product-warning {
        bottom: 90px;
        right: 10px;
        left: 10px;
        max-width: none;
        text-align: center;
        font-size: 14px;
      }
      .button-container { margin: 30px 0; }
      .generate-btn { width: auto; min-width: 220px; }
      .feedback-buttons { flex-direction: column; }
      .feedback-buttons button { width: 100%; max-width: 280px; }
    }
  </style>
</head>
<body>
  <!-- Authentication Container -->
  <div id="auth-container" class="auth-container">
    <div class="auth-header">
      <h1>AI Design Generator</h1>
      <p>Create stunning images with AI</p>
    </div>
    <div class="auth-content">
      <!-- Login Form -->
      <form id="login-form">
        <div class="form-group">
          <label for="login-email">Email Address</label>
          <input id="login-email" type="email" required autocomplete="username" placeholder="Enter your email">
        </div>
        <div class="form-group">
          <label for="login-password">Password</label>
          <input id="login-password" type="password" required autocomplete="current-password" placeholder="Enter your password">
        </div>
        <div class="form-group">
          <a href="#" id="reset-password-link" onclick="resetPassword(); return false;">Forgot password?</a>
        </div>
        <button type="submit" class="btn">Sign In</button>
        <div id="login-msg" class="message" style="display: none;"></div>
      </form>
      <!-- Registration Form -->
      <form id="register-form" class="hidden">
        <!-- Step 1 -->
        <div id="register-step1">
          <div class="form-group">
            <label for="register-email">Email Address</label>
            <input id="register-email" type="email" required autocomplete="username" placeholder="Enter your email">
          </div>
          <div class="form-group">
            <label for="register-industry-code">Industry Code</label>
            <input id="register-industry-code" type="text" required placeholder="Enter industry code">
          </div>
          <div class="code-input-group">
            <button type="button" id="send-code-btn" class="btn btn-code">Send Verification Code</button>
          </div>
          <div id="register-msg-step1" class="message" style="display: none;"></div>
        </div>
        <!-- Step 2 -->
        <div id="register-step2" class="hidden">
          <div class="form-group">
            <label for="register-code">Verification Code</label>
            <input id="register-code" type="text" required placeholder="Enter 6-digit code">
          </div>
          <button type="button" id="verify-code-btn" class="btn">Verify Code</button>
          <button type="button" id="back-to-step1" class="btn btn-secondary">Back</button>
          <div id="register-msg-step2" class="message" style="display: none;"></div>
        </div>
        <!-- Step 3 -->
        <div id="register-step3" class="hidden">
          <div class="form-group">
            <label for="register-password">Password</label>
            <input id="register-password" type="password" required autocomplete="new-password" placeholder="Create a password">
          </div>
          <div class="form-group">
            <label for="register-password2">Confirm Password</label>
            <input id="register-password2" type="password" required autocomplete="new-password" placeholder="Confirm your password">
          </div>
          <div class="form-group">
            <label for="register-name">Full Name</label>
            <input id="register-name" type="text" required placeholder="Enter your full name">
          </div>
          <button type="submit" class="btn">Create Account</button>
          <button type="button" id="back-to-step2" class="btn btn-secondary">Back</button>
          <div id="register-msg-step3" class="message" style="display: none;"></div>
        </div>
      </form>
      <div class="switch-link">
        <span id="switch-to-register">Don't have an account? <a href="#" onclick="showRegister(); return false;">Sign up</a></span>
        <span id="switch-to-login" class="hidden">Already have an account? <a href="#" onclick="showLogin(); return false;">Sign in</a></span>
      </div>
    </div>
  </div>

  <!-- Main Application -->
  <div id="main-app" class="main-app">
    <div class="app-header">
      <h1>AI Design Generator</h1>
      <div class="nav-links">
        <a href="#" onclick="showPage('setup-page'); return false;">Setup</a>
        <a href="#" onclick="showPage('account-page'); return false;">Account</a>
        <a href="#" onclick="showPage('template-page'); return false;">Templates</a>
        <a href="#" onclick="showPage('records-page'); return false;">Past Records</a>
        <a href="#" id="create-account-link" onclick="showPage('create-account-page'); return false;" class="hidden">Create Account</a>
        <button id="logout-btn" class="logout-btn">Logout</button>
      </div>
    </div>
    <div class="app-content">
      <!-- Setup Page -->
      <div id="setup-page" class="controls hidden">
        <h2>Setup Your Profile</h2>
        <form id="setup-form">
          <div class="form-group">
            <label for="setup-name">Full Name</label>
            <input id="setup-name" type="text" required placeholder="Enter your full name">
          </div>
          <div class="form-group hidden" id="setup-industry-group">
            <label for="setup-industry">Industry</label>
            <input id="setup-industry" type="text" placeholder="Enter your industry (optional)">
          </div>
          <div class="form-group">
            <label for="setup-product">Product Name</label>
            <input id="setup-product" type="text" required placeholder="Enter product name (e.g., lip gloss, phone)">
          </div>
          <button type="submit" class="btn">Save Profile</button>
          <div id="setup-msg" class="message" style="display: none;"></div>
        </form>
      </div>

      <!-- Account Page -->
      <div id="account-page" class="controls hidden">
        <h2>Your Account</h2>
        <div id="account-info"></div>
        <form id="account-form" class="hidden">
          <div class="form-group">
            <label for="account-name">Full Name</label>
            <input id="account-name" type="text" required placeholder="Enter your full name">
          </div>
          <div class="form-group hidden" id="account-industry-group">
            <label for="account-industry">Industry</label>
            <input id="account-industry" type="text" placeholder="Enter your industry (optional)">
          </div>
          <div class="form-group">
            <label for="account-product">Product Name</label>
            <input id="account-product" type="text" required placeholder="Enter product name (e.g., lip gloss, phone)">
          </div>
          <button type="submit" class="btn">Update Profile</button>
          <button type="button" id="cancel-edit" class="btn btn-secondary">Cancel</button>
          <div id="account-msg" class="message" style="display: none;"></div>
        </form>
        <button id="edit-account-btn" class="btn">Edit Profile</button>
      </div>

      <!-- Template Page -->
      <div id="template-page" class="controls">
        <h2>Generate Images</h2>
        <div id="product-display" class="product-display" style="display: none;"></div>
        <div class="row">
          <div class="form-group">
            <h3>Select Template</h3>
            <div class="template-checkboxes" id="template-checkboxes"></div>
          </div>
          <div class="form-group">
            <h3>Select Specifications</h3>
            <div id="spec-selections"></div>
          </div>
          <div class="form-group">
            <h3>Select AI Model</h3>
            <select id="llm-select" required>
              <option value="pollinations">Pollinations AI</option>
              <option value="stability">Stability AI (SDXL)</option>
              <option value="huggingface">Hugging Face (FLUX.1-dev)</option>
            </select>
          </div>
        </div>
        <div id="prompt-display" class="prompt-display" style="display: none;"></div>

        <!-- FIXED BUTTON -->
        <div class="button-container">
          <button id="generate-images-btn" class="generate-btn">Generate Images</button>
        </div>

        <div id="template-status" class="message" style="display: none;"></div>

        <!-- NEW IMAGE LAYOUT -->
        <div id="generated-images" class="generated-images-container hidden">
          <div class="image-pair" id="image-pair"></div>
          <div class="feedback-buttons" id="feedback-buttons"></div>
        </div>
      </div>

      <!-- Past Records Page -->
      <div id="records-page" class="controls hidden">
        <h2>Past Generation Records</h2>
        <div id="records-list" class="grid"></div>
        <div id="records-msg" class="message" style="display: none;"></div>
      </div>

      <!-- Create Account Page (Master Only) -->
      <div id="create-account-page" class="controls hidden">
        <h2>Create Industry Account</h2>
        <form id="create-account-form">
          <div class="form-group">
            <label for="industry-name">Industry Name*</label>
            <select id="industry-name" required>
              <option value="">Select industry</option>
              <option value="advertising">Advertising</option>
              <option value="ecommerce">E-commerce</option>
              <option value="entertainment">Entertainment</option>
              <option value="healthcare">Healthcare</option>
              <option value="other">Other</option>
            </select>
          </div>
          <div class="form-group hidden" id="custom-industry-group">
            <label for="custom-industry-name">Custom Industry Name</label>
            <input id="custom-industry-name" type="text" placeholder="Enter custom industry name">
          </div>
          <div id="spec-container">
            <div class="spec-group" data-spec-id="1">
              <div class="form-group">
                <label for="spec-1-type">Specification 1*</label>
                <select id="spec-1-type" required>
                  <option value="">Select specification</option>
                  <option value="size">Size</option>
                  <option value="colorScheme">Color Scheme</option>
                  <option value="style">Style</option>
                  <option value="tone">Tone</option>
                  <option value="dimensions">Dimensions</option>
                  <option value="other">Other</option>
                </select>
              </div>
              <div class="form-group hidden" id="spec-1-custom-group">
                <label for="spec-1-custom-name">Custom Specification Name</label>
                <input id="spec-1-custom-name" type="text" placeholder="Enter specification name (e.g., Font)">
              </div>
              <div class="value-group" id="spec-1-values">
                <div class="form-group">
                  <label for="spec-1-value-1">Value 1</label>
                  <input id="spec-1-value-1" type="text" required placeholder="Enter value (e.g., 1:1)">
                </div>
              </div>
              <button type="button" class="btn btn-add-value" onclick="addValue(1)">Add Value</button>
            </div>
          </div>
          <div class="form-group">
            <label for="industry-product">Product Name*</label>
            <input id="industry-product" type="text" required placeholder="Enter product name (e.g., lip gloss, phone)">
          </div>
          <button type="button" id="add-spec-btn" class="btn btn-add-spec">Add Specification</button>
          <button type="submit" class="btn">Generate Industry Code</button>
          <button type="button" id="reset-specs" class="btn btn-secondary">Reset</button>
          <div id="create-account-msg" class="message" style="display: none;"></div>
        </form>
        <div id="generated-code" class="code-display hidden">
          Industry Code: <span id="industry-code"></span>
          <button onclick="copyCode()">Copy</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Product Warning -->
  <div id="product-warning" class="product-warning">
    <strong>Warning: Product name not set.</strong> <a href="#" onclick="showPage('account-page'); return false;">Update now</a>
  </div>

  <script>
    // EmailJS
    const EMAILJS_SERVICE_ID = 'service_sq0910p';
    const EMAILJS_TEMPLATE_ID = 'template_6cykjb4';
    emailjs.init('DjaueAhkuIzk5gj2x');

    // Firebase
    const firebaseConfig = {
      apiKey: "AIzaSyC0P-rmy6ZiKCBnivZQBahKWaPcqg4nDnU",
      authDomain: "image-generator-c51e2.firebaseapp.com",
      projectId: "image-generator-c51e2",
      storageBucket: "image-generator-c51e2.firebasestorage.app",
      messagingSenderId: "222706847155",
      appId: "1:222706847155:web:824453eca61077f5f0cfc6",
      measurementId: "G-JSK1FHFEMT"
    };
    firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();
    const db = firebase.firestore();

    // Global state
    let currentUser = null;
    let userRole = null;
    let userTemplates = [];
    let userSpecs = null;
    let selectedSpecs = {};
    let generationCount = 0;
    let userProductName = '';
    let userIndustryCode = null;

    // UI Helpers
    function showElement(id) { const el = document.getElementById(id); if (el) { el.classList.remove('hidden'); el.style.display = 'block'; } }
    function hideElement(id) { const el = document.getElementById(id); if (el) { el.classList.add('hidden'); el.style.display = 'none'; } }
    function showMessage(id, message, type = 'info') {
      const el = document.getElementById(id);
      if (el) { el.innerHTML = message; el.className = `message ${type}`; el.style.display = 'block'; }
    }
    function hideMessage(id) { const el = document.getElementById(id); if (el) el.style.display = 'none'; }
    function showLogin() {
      showElement('login-form'); hideElement('register-form');
      showElement('switch-to-register'); hideElement('switch-to-login');
      hideMessage('login-msg');
    }
    function showRegister() {
      hideElement('login-form'); showElement('register-form');
      hideElement('switch-to-register'); showElement('switch-to-login');
      showElement('register-step1'); hideElement('register-step2'); hideElement('register-step3');
      document.getElementById('register-form').reset();
      hideMessage('register-msg-step1'); hideMessage('register-msg-step2'); hideMessage('register-msg-step3');
    }
    function showPage(pageId) {
      const pages = ['setup-page', 'account-page', 'template-page', 'records-page', 'create-account-page'];
      if (pageId === 'create-account-page' && userRole !== 'master') {
        showMessage('template-status', 'Access denied: Only master accounts can create industry codes.', 'error');
        pageId = 'template-page';
      }
      pages.forEach(id => hideElement(id));
      showElement(pageId);
      if (pageId === 'create-account-page') {
        hideElement('generated-code');
        document.getElementById('create-account-form').reset();
        document.getElementById('spec-container').innerHTML = `
          <div class="spec-group" data-spec-id="1">
            <div class="form-group">
              <label for="spec-1-type">Specification 1*</label>
              <select id="spec-1-type" required>
                <option value="">Select specification</option>
                <option value="size">Size</option>
                <option value="colorScheme">Color Scheme</option>
                <option value="style">Style</option>
                <option value="tone">Tone</option>
                <option value="dimensions">Dimensions</option>
                <option value="other">Other</option>
              </select>
            </div>
            <div class="form-group hidden" id="spec-1-custom-group">
              <label for="spec-1-custom-name">Custom Specification Name</label>
              <input id="spec-1-custom-name" type="text" placeholder="Enter specification name (e.g., Font)">
            </div>
            <div class="value-group" id="spec-1-values">
              <div class="form-group">
                <label for="spec-1-value-1">Value 1</label>
                <input id="spec-1-value-1" type="text" required placeholder="Enter value (e.g., 1:1)">
              </div>
            </div>
            <button type="button" class="btn btn-add-value" onclick="addValue(1)">Add Value</button>
          </div>
        `;
        hideMessage('create-account-msg');
        setupSpecListeners(1);
      }
      if (pageId === 'template-page') loadTemplates();
      if (pageId === 'records-page') loadRecords();
      if (pageId === 'account-page') loadAccountInfo();
      checkProductWarning();
    }
    function showMainApp() {
      document.getElementById('auth-container').style.display = 'none';
      document.getElementById('main-app').classList.add('show');
      if (userRole === 'master') showElement('create-account-link');
      else hideElement('create-account-link');
      checkProductWarning();
      showPage((currentUser && (!currentUser.displayName || !userProductName || userProductName.trim().length < 2)) ? 'setup-page' : 'template-page');
    }
    function showAuth() {
      document.getElementById('auth-container').style.display = 'block';
      document.getElementById('main-app').classList.remove('show');
      hideElement('product-warning');
      showLogin();
    }

    // Product Warning
    function checkProductWarning() {
      const warning = document.getElementById('product-warning');
      if (userProductName && userProductName.trim().length >= 2) {
        hideElement('product-warning');
      } else {
        showElement('product-warning');
      }
    }

    // Copy Industry Code
    function copyCode() {
      const code = document.getElementById('industry-code').textContent;
      navigator.clipboard.writeText(code).then(() => {
        showMessage('create-account-msg', 'Industry code copied!', 'success');
      }).catch(() => {
        showMessage('create-account-msg', 'Failed to copy code.', 'error');
      });
    }

    // Specification Management
    function setupSpecListeners(specId) {
      const typeSelect = document.getElementById(`spec-${specId}-type`);
      if (typeSelect) {
        typeSelect.addEventListener('change', function() {
          const customGroup = document.getElementById(`spec-${specId}-custom-group`);
          if (this.value === 'other') {
            showElement(`spec-${specId}-custom-group`);
            document.getElementById(`spec-${specId}-custom-name`).setAttribute('required', 'true');
          } else {
            hideElement(`spec-${specId}-custom-group`);
            document.getElementById(`spec-${specId}-custom-name`).removeAttribute('required');
          }
        });
      }
    }
    function addValue(specId) {
      const valuesContainer = document.getElementById(`spec-${specId}-values`);
      const valueCount = valuesContainer.querySelectorAll('.form-group').length;
      if (valueCount >= 5) {
        showMessage('create-account-msg', `Maximum 5 values allowed for specification ${specId}.`, 'error');
        return;
      }
      const valueId = valueCount + 1;
      const valueGroup = document.createElement('div');
      valueGroup.className = 'form-group';
      valueGroup.innerHTML = `
        <label for="spec-${specId}-value-${valueId}">Value ${valueId}</label>
        <input id="spec-${specId}-value-${valueId}" type="text" required placeholder="Enter value (e.g., 1:1)">
      `;
      valuesContainer.appendChild(valueGroup);
    }
    function addSpecification() {
      const container = document.getElementById('spec-container');
      const specCount = container.querySelectorAll('.spec-group').length;
      if (specCount >= 5) {
        showMessage('create-account-msg', 'Maximum 5 specifications allowed.', 'error');
        return;
      }
      const specId = specCount + 1;
      const specGroup = document.createElement('div');
      specGroup.className = 'spec-group';
      specGroup.dataset.specId = specId;
      specGroup.innerHTML = `
        <div class="form-group">
          <label for="spec-${specId}-type">Specification ${specId}</label>
          <select id="spec-${specId}-type">
            <option value="">None</option>
            <option value="size">Size</option>
            <option value="colorScheme">Color Scheme</option>
            <option value="style">Style</option>
            <option value="tone">Tone</option>
            <option value="dimensions">Dimensions</option>
            <option value="other">Other</option>
          </select>
        </div>
        <div class="form-group hidden" id="spec-${specId}-custom-group">
          <label for="spec-${specId}-custom-name">Custom Specification Name</label>
          <input id="spec-${specId}-custom-name" type="text" placeholder="Enter specification name (e.g., Font)">
        </div>
        <div class="value-group" id="spec-${specId}-values">
          <div class="form-group">
            <label for="spec-${specId}-value-1">Value 1</label>
            <input id="spec-${specId}-value-1" type="text" required placeholder="Enter value (e.g., 1:1)">
          </div>
        </div>
        <button type="button" class="btn btn-add-value" onclick="addValue(${specId})">Add Value</button>
      `;
      container.appendChild(specGroup);
      setupSpecListeners(specId);
    }

    // Authentication
    async function handleLogin(email, password) {
      try {
        showMessage('login-msg', 'Signing in...', 'info');
        const result = await auth.signInWithEmailAndPassword(email, password);
        currentUser = result.user;
        await checkUserRole();
        await loadAccountInfo();
        hideMessage('login-msg');
        showMainApp();
      } catch (err) {
        let errorMessage = 'Login failed. Please try again.';
        if (err.code === 'auth/invalid-login-credentials' || err.code === 'auth/wrong-password') {
          errorMessage = 'Incorrect email or password.';
        } else if (err.code === 'auth/user-not-found') {
          errorMessage = 'No account found with this email.';
        }
        showMessage('login-msg', errorMessage, 'error');
      }
    }
    async function resetPassword() {
      const email = document.getElementById('login-email').value.trim();
      if (!email) {
        showMessage('login-msg', 'Please enter your email.', 'error');
        return;
      }
      try {
        await auth.sendPasswordResetEmail(email);
        showMessage('login-msg', 'Reset email sent! Check your inbox.', 'success');
      } catch (err) {
        showMessage('login-msg', 'Error: ' + err.message, 'error');
      }
    }
    async function checkUserRole() {
      if (currentUser.email === 'langtechgroup5@gmail.com') {
        userRole = 'master';
        return;
      }
      const userDoc = await db.collection('users').doc(currentUser.uid).get();
      userRole = userDoc.exists ? userDoc.data().role || 'client' : 'client';
      userIndustryCode = userDoc.exists ? userDoc.data().industryCode || null : null;
      if (userRole === 'client') {
        hideElement('setup-industry-group');
        hideElement('account-industry-group');
      } else {
        showElement('setup-industry-group');
        showElement('account-industry-group');
      }
    }
    function handleLogout() {
      auth.signOut().then(() => {
        currentUser = null;
        userRole = null;
        userTemplates = [];
        userSpecs = null;
        selectedSpecs = {};
        userProductName = '';
        userIndustryCode = null;
        showAuth();
      });
    }

    // Registration
    async function sendVerificationCode() {
      const email = document.getElementById('register-email').value.trim();
      const industryCode = document.getElementById('register-industry-code').value.trim();
      if (!email || !industryCode) {
        showMessage('register-msg-step1', 'Please enter email and code.', 'error');
        return;
      }
      try {
        const codeDoc = await db.collection('industryCodes').doc(industryCode).get();
        if (!codeDoc.exists) {
          showMessage('register-msg-step1', 'Invalid industry code.', 'error');
          return;
        }
        if (codeDoc.data().used) {
          showMessage('register-msg-step1', 'This industry code has already been used.', 'error');
          return;
        }
        const userQuery = await db.collection('users')
          .where('industryCode', '==', industryCode)
          .limit(1)
          .get();
        if (!userQuery.empty) {
          showMessage('register-msg-step1', 'This industry code is already linked to an account.', 'error');
          return;
        }
        window._registerCode = Math.floor(100000 + Math.random() * 900000).toString();
        window._registerEmail = email;
        window._industryCode = industryCode;
        await emailjs.send(EMAILJS_SERVICE_ID, EMAILJS_TEMPLATE_ID, {
          email: email,
          code: window._registerCode
        });
        showMessage('register-msg-step1', 'Verification code sent!', 'success');
        hideElement('register-step1');
        showElement('register-step2');
      } catch (err) {
        showMessage('register-msg-step1', 'Failed to send email: ' + err.message, 'error');
      }
    }
    function verifyCode() {
      const code = document.getElementById('register-code').value.trim();
      if (code === window._registerCode) {
        hideElement('register-step2');
        showElement('register-step3');
        hideMessage('register-msg-step2');
      } else {
        showMessage('register-msg-step2', 'Incorrect code.', 'error');
      }
    }
    async function completeRegistration() {
      const password = document.getElementById('register-password').value;
      const password2 = document.getElementById('register-password2').value;
      const name = document.getElementById('register-name').value.trim();
      if (password !== password2) {
        showMessage('register-msg-step3', 'Passwords do not match.', 'error');
        return;
      }
      if (password.length < 6) {
        showMessage('register-msg-step3', 'Password must be at least 6 characters.', 'error');
        return;
      }
      try {
        showMessage('register-msg-step3', 'Creating account...', 'info');
        const result = await auth.createUserWithEmailAndPassword(window._registerEmail, password);
        currentUser = result.user;
        const codeDoc = await db.collection('industryCodes').doc(window._industryCode).get();
        const { industryName, specifications, productName } = codeDoc.data();
        const finalProductName = productName || 'Default Product';
        const style = specifications && specifications.style && specifications.style.length > 0 ? specifications.style[0] : 'default';
        await db.collection('users').doc(currentUser.uid).set({
          email: window._registerEmail,
          name: name,
          role: 'client',
          industryCode: window._industryCode,
          industryName: industryName,
          template: style,
          specifications: specifications || {},
          productName: finalProductName,
          createdAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        await db.collection('industryCodes').doc(window._industryCode).update({
          used: true,
          usedBy: currentUser.uid
        });
        userRole = 'client';
        userTemplates = [style];
        userSpecs = specifications || {};
        selectedSpecs = Object.keys(userSpecs).reduce((acc, key) => {
          acc[key] = userSpecs[key][0] || '';
          return acc;
        }, {});
        userProductName = finalProductName;
        userIndustryCode = window._industryCode;
        hideElement('setup-industry-group');
        hideElement('account-industry-group');
        showMessage('register-msg-step3', 'Account created successfully!', 'success');
        setTimeout(() => showMainApp(), 1000);
      } catch (err) {
        showMessage('register-msg-step3', 'Error: ' + err.message, 'error');
      }
    }

    // Setup Page
    async function handleSetup(e) {
      e.preventDefault();
      const name = document.getElementById('setup-name').value.trim();
      const productName = document.getElementById('setup-product').value.trim();
      const industry = userRole === 'master' ? document.getElementById('setup-industry').value.trim() : null;
      if (!name || !productName || productName.length < 2) {
        showMessage('setup-msg', 'Please enter a valid name and product name (2+ characters).', 'error');
        return;
      }
      try {
        showMessage('setup-msg', 'Saving profile...', 'info');
        const userDoc = await db.collection('users').doc(currentUser.uid).get();
        const existingData = userDoc.exists ? userDoc.data() : {};
        await db.collection('users').doc(currentUser.uid).set({
          name: name,
          industry: industry || existingData.industryName || null,
          industryCode: existingData.industryCode || null,
          productName: productName,
          setupCompleted: true
        }, { merge: true });
        await currentUser.updateProfile({ displayName: name });
        userProductName = productName;
        checkProductWarning();
        showMessage('setup-msg', 'Profile saved!', 'success');
        setTimeout(() => showPage('template-page'), 1000);
      } catch (err) {
        showMessage('setup-msg', 'Error: ' + err.message, 'error');
      }
    }

    // Account Page
    async function loadAccountInfo() {
      try {
        const userDoc = await db.collection('users').doc(currentUser.uid).get();
        if (userDoc.exists) {
          const data = userDoc.data();
          userProductName = data.productName || 'Default Product';
          userIndustryCode = data.industryCode || '000000';
          let industryDisplay = data.industryName || 'Not specified';
          if (userIndustryCode && userIndustryCode !== '000000') {
            try {
              const codeDoc = await db.collection('industryCodes').doc(userIndustryCode).get();
              industryDisplay = codeDoc.exists ? codeDoc.data().industryName : 'Unknown';
            } catch (err) {
              console.error('Error fetching industry code:', err);
            }
          }
          document.getElementById('account-info').innerHTML = `
            <p><strong>Name:</strong> ${data.name || 'Not set'}</p>
            <p><strong>Email:</strong> ${currentUser.email}</p>
            <p><strong>Industry:</strong> ${industryDisplay} (Code: ${userIndustryCode})</p>
            <p><strong>Template:</strong> ${data.template || 'None'}</p>
            <p><strong>Product Name:</strong> ${userProductName}</p>
          `;
          checkProductWarning();
        } else {
          userProductName = '';
          showMessage('account-msg', 'Profile not found. Please set up your profile.', 'error');
          showPage('setup-page');
        }
      } catch (err) {
        showMessage('account-msg', 'Error loading account: ' + err.message, 'error');
      }
    }
    async function handleAccountUpdate(e) {
      e.preventDefault();
      const name = document.getElementById('account-name').value.trim();
      const productName = document.getElementById('account-product').value.trim();
      const industry = userRole === 'master' ? document.getElementById('account-industry').value.trim() : null;
      if (!name || !productName || productName.length < 2) {
        showMessage('account-msg', 'Please enter a valid name and product name (2+ characters).', 'error');
        return;
      }
      try {
        showMessage('account-msg', 'Updating profile...', 'info');
        const userDoc = await db.collection('users').doc(currentUser.uid).get();
        const existingData = userDoc.exists ? userDoc.data() : {};
        await db.collection('users').doc(currentUser.uid).set({
          name: name,
          industry: industry || existingData.industryName || null,
          industryCode: existingData.industryCode || null,
          productName: productName
        }, { merge: true });
        await currentUser.updateProfile({ displayName: name });
        userProductName = productName;
        checkProductWarning();
        showMessage('account-msg', 'Profile updated!', 'success');
        hideElement('account-form');
        showElement('edit-account-btn');
        loadAccountInfo();
      } catch (err) {
        showMessage('account-msg', 'Error: ' + err.message, 'error');
      }
    }

    // Image Generation Functions
    function sanitizePrompt(prompt) {
      return prompt.replace(/[\n\r\t"']/g, ' ').trim();
    }

    async function generateWithPollinations(prompt, seed, width = 768, height = 1024, retries = 3) {
      try {
        const sanitizedPrompt = sanitizePrompt(prompt);
        if (!sanitizedPrompt) throw new Error('Prompt is empty or invalid');
        const url = `https://image.pollinations.ai/prompt/${encodeURIComponent(sanitizedPrompt)}?width=${width}&height=${height}&seed=${seed}`;
        console.log('Pollinations AI URL:', url);
        const response = await fetch(url, { method: 'GET', mode: 'cors' });
        if (!response.ok) {
          if (response.status === 502 && retries > 0) {
            console.warn(`Retrying Pollinations AI request (${retries} attempts left)`);
            await new Promise(resolve => setTimeout(resolve, 1000));
            return generateWithPollinations(prompt, seed, width, height, retries - 1);
          }
          throw new Error(`Pollinations AI returned ${response.status}`);
        }
        const blob = await response.blob();
        return { provider: 'Pollinations AI', url: URL.createObjectURL(blob) };
      } catch (err) {
        console.error('Pollinations AI error:', err);
        return null;
      }
    }

    async function generateWithStability(prompt, seed, width = 1024, height = 1024) {
      try {
        const sanitizedPrompt = sanitizePrompt(prompt);
        if (!sanitizedPrompt) throw new Error('Prompt is empty or invalid');
        const url = '/api/stability'; // Proxy endpoint
        const headers = {
          "Content-Type": "application/json"
        };
        const payload = {
          text_prompts: [{ text: sanitizedPrompt }],
          cfg_scale: 7,
          width: width,
          height: height,
          samples: 1,
          seed: seed
        };
        if (![512, 768, 1024].includes(width) || ![512, 768, 1024].includes(height)) {
          throw new Error('Invalid width or height for Stability AI');
        }
        if (payload.cfg_scale < 0 || payload.cfg_scale > 35) {
          throw new Error('Invalid cfg_scale for Stability AI');
        }
        console.log('Stability AI Payload:', payload);
        const response = await fetch(url, {
          method: 'POST',
          headers: headers,
          body: JSON.stringify(payload)
        });
        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Stability AI error: ${response.status} - ${errorText}`);
        }
        const data = await response.json();
        const images = data.artifacts.map(item => ({
          provider: 'Stability AI',
          url: `data:image/png;base64,${item.base64}`
        }));
        return images[0];
      } catch (err) {
        console.error('Stability AI error:', err);
        return null;
      }
    }

    async function generateWithHuggingFace(prompt, seed, width = 512, height = 512) {
      try {
        const sanitizedPrompt = sanitizePrompt(prompt);
        if (!sanitizedPrompt) throw new Error('Prompt is empty or invalid');
        const url = '/api/huggingface'; // Proxy endpoint
        const headers = {
          "Content-Type": "application/json"
        };
        const payload = {
          inputs: sanitizedPrompt,
          parameters: {
            negative_prompt: "low quality, blurry, distorted",
            guidance_scale: 7.5,
            num_inference_steps: 50,
            width: width,
            height: height,
            seed: seed
          }
        };
        if (![512, 1024].includes(width) || ![512, 1024].includes(height)) {
          throw new Error('Invalid width or height for Hugging Face');
        }
        if (payload.parameters.guidance_scale < 1 || payload.parameters.guidance_scale > 20) {
          throw new Error('Invalid guidance_scale for Hugging Face');
        }
        if (payload.parameters.num_inference_steps < 1 || payload.parameters.num_inference_steps > 100) {
          throw new Error('Invalid num_inference_steps for Hugging Face');
        }
        console.log('Hugging Face Payload:', payload);
        const response = await fetch(url, {
          method: 'POST',
          headers: headers,
          body: JSON.stringify(payload)
        });
        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Hugging Face error: ${response.status} - ${errorText}`);
        }
        const blob = await response.blob();
        return { provider: 'Hugging Face', url: URL.createObjectURL(blob) };
      } catch (err) {
        console.error('Hugging Face error:', err);
        return null;
      }
    }

    // Image Generation
    async function generateImages() {
      if (!currentUser) {
        showMessage('template-status', 'Please sign in.', 'error');
        return;
      }
      if (!userProductName || userProductName.trim().length < 2) {
        showMessage('template-status', 'Product name required. <a href="#" onclick="showPage(\'account-page\'); return false;">Update now</a>', 'error');
        showPage('account-page');
        return;
      }
      const selectedTemplates = Array.from(document.querySelectorAll('#template-checkboxes input:checked')).map(input => input.value);
      if (selectedTemplates.length === 0) {
        showMessage('template-status', 'Please select at least one template.', 'error');
        return;
      }
      if (generationCount >= 20) {
        showMessage('template-status', 'Maximum generation limit reached.', 'error');
        return;
      }
      const llmSelect = document.getElementById('llm-select').value;
      let extra = '';
      if (userSpecs) {
        extra = Object.entries(selectedSpecs)
          .map(([key, value]) => `${key}: ${value}`)
          .join(', ');
        if (extra) extra = ', ' + extra;
      }
      const basePrompt = `A beautiful product design for ${userProductName}, ${selectedTemplates.join(', ')} style${extra}, high quality, detailed, professional`;
      showMessage('template-status', `Generating images with ${llmSelect}...`, 'info');
      document.getElementById('generate-images-btn').disabled = true;

      const generators = {
        pollinations: generateWithPollinations,
        stability: generateWithStability,
        huggingface: generateWithHuggingFace
      };
      const dimensions = {
        pollinations: { width: 768, height: 1024 },
        stability: { width: 1024, height: 1024 },
        huggingface: { width: 512, height: 512 }
      };
      const llms = ['pollinations', 'stability', 'huggingface'];
      const selectedIndex = llms.indexOf(llmSelect);
      const orderedLLMs = [llmSelect, ...llms.filter(llm => llm !== llmSelect)];

      let images = [];
      let attempts = 0;
      const maxAttempts = 6;
      const seed = Date.now();

      while (images.length < 2 && attempts < maxAttempts && generationCount < 20) {
        const llm = orderedLLMs[attempts % orderedLLMs.length];
        const prompt = images.length === 0 ? basePrompt : `${basePrompt} (variation ${images.length + 1})`;
        const { width, height } = dimensions[llm];
        try {
          const image = await generators[llm](prompt, seed + attempts, width, height);
          if (image) {
            images.push(image);
            generationCount++;
          } else {
            console.warn(`No image generated by ${llm}, trying next provider`);
          }
        } catch (err) {
          console.error(`Error with ${llm}:`, err);
        }
        attempts++;
      }

      if (images.length === 1 && attempts < maxAttempts && generationCount < 20) {
        const nextLLM = orderedLLMs[attempts % orderedLLMs.length];
        const prompt = `${basePrompt} (variation 2)`;
        const { width, height } = dimensions[nextLLM];
        try {
          const image = await generators[nextLLM](prompt, seed + attempts, width, height);
          if (image) {
            images.push(image);
            generationCount++;
          }
        } catch (err) {
          console.error(`Error with ${nextLLM}:`, err);
        }
      }

      try {
        if (images.length === 2) {
          renderImages(images);
          const generationRef = db.collection('generations').doc();
          await generationRef.set({
            userId: currentUser.uid,
            templates: selectedTemplates,
            productName: userProductName,
            specifications: selectedSpecs,
            images: images.map(item => ({ provider: item.provider, url: item.url })),
            createdAt: firebase.firestore.FieldValue.serverTimestamp()
          });
          const userGenerations = await db.collection('generations')
            .where('userId', '==', currentUser.uid)
            .orderBy('createdAt', 'desc')
            .get();
          userGenerations.docs.slice(3).forEach(doc => doc.ref.delete());
          showMessage('template-status', 'Images generated successfully!', 'success');
        } else {
          const failedProviders = orderedLLMs.slice(0, attempts).join(', ');
          showMessage('template-status', `Failed to generate images with ${failedProviders}. Please try again or select a different model.`, 'error');
        }
      } catch (err) {
        showMessage('template-status', 'Error saving generation: ' + err.message, 'error');
      } finally {
        document.getElementById('generate-images-btn').disabled = false;
      }
    }

    // NEW renderImages FUNCTION
    function renderImages(items) {
      const container = document.getElementById('generated-images');
      const pairDiv = document.getElementById('image-pair');
      const feedbackDiv = document.getElementById('feedback-buttons');

      pairDiv.innerHTML = '';
      feedbackDiv.innerHTML = '';
      container.classList.remove('hidden');

      items.forEach((item, idx) => {
        const imgContainer = document.createElement('div');
        const img = document.createElement('img');
        img.src = item.url;
        img.alt = `Generated image ${idx + 1} from ${item.provider}`;
        img.onload = () => img.classList.add('loaded');
        imgContainer.appendChild(img);
        const providerLabel = document.createElement('div');
        providerLabel.textContent = item.provider;
        imgContainer.appendChild(providerLabel);
        pairDiv.appendChild(imgContainer);
      });

      feedbackDiv.innerHTML = `
        <button class="btn-like-this" onclick="downloadImage('${items[0].url}', 0)">I like this (${items[0].provider})</button>
        <button class="btn-like-that" onclick="downloadImage('${items[1].url}', 1)">I like that (${items[1].provider})</button>
        <button class="btn-both-bad" onclick="handleBothBad()">Both bad</button>
      `;
    }

    function downloadImage(url, idx) {
      const a = document.createElement('a');
      a.href = url;
      a.download = `generated-image-${idx + 1}.png`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      showMessage('template-status', `Image ${idx + 1} downloaded!`, 'success');
    }
    function handleBothBad() {
      generationCount++;
      generateImages();
    }

    // Template Page
    async function loadTemplates() {
      if (!currentUser) {
        showMessage('template-status', 'Please sign in.', 'error');
        return;
      }
      try {
        if (userRole === 'master') {
          userTemplates = ['modern', 'classic', 'minimalist'];
          userSpecs = null;
          selectedSpecs = {};
        } else {
          const userDoc = await db.collection('users').doc(currentUser.uid).get();
          if (!userDoc.exists) {
            showMessage('template-status', 'Profile not found. Please set up your profile.', 'error');
            showPage('setup-page');
            return;
          }
          const data = userDoc.data();
          userTemplates = data.template ? [data.template] : [];
          userSpecs = data.specifications || {};
          selectedSpecs = Object.keys(userSpecs).reduce((acc, key) => {
            acc[key] = userSpecs[key][0] || '';
            return acc;
          }, {});
          userProductName = data.productName || 'Default Product';
          userIndustryCode = data.industryCode || null;
        }
        if (!userProductName || userProductName.trim().length < 2) {
          showMessage('template-status', 'Product name required. <a href="#" onclick="showPage(\'account-page\'); return false;">Update now</a>', 'error');
          showPage('account-page');
          checkProductWarning();
          return;
        }
        const checkboxes = document.getElementById('template-checkboxes');
        checkboxes.innerHTML = userTemplates.map(template => `
          <label><input type="checkbox" value="${template}" checked> ${template.charAt(0).toUpperCase() + template.slice(1)}</label>
        `).join('');
        document.getElementById('product-display').textContent = `Product: ${userProductName}`;
        showElement('product-display');
        const specSelections = document.getElementById('spec-selections');
        specSelections.innerHTML = Object.entries(userSpecs).map(([key, values]) => `
          <div class="form-group">
            <label for="spec-select-${key}">${key.charAt(0).toUpperCase() + key.slice(1)}</label>
            <select id="spec-select-${key}" data-spec-key="${key}">
              ${values.map(value => `<option value="${value}">${value}</option>`).join('')}
            </select>
          </div>
        `).join('');
        document.querySelectorAll('#spec-selections select').forEach(select => {
          select.addEventListener('change', function() {
            selectedSpecs[this.dataset.specKey] = this.value;
            updatePromptDisplay();
          });
        });
        if (Object.keys(userSpecs).length > 0) {
          showElement('spec-selections');
        } else {
          hideElement('spec-selections');
        }
        updatePromptDisplay();
        document.querySelectorAll('#template-checkboxes input').forEach(checkbox => {
          checkbox.addEventListener('change', updatePromptDisplay);
        });
        checkProductWarning();
      } catch (err) {
        showMessage('template-status', 'Error loading templates: ' + err.message, 'error');
      }
    }
    function updatePromptDisplay() {
      const selectedTemplates = Array.from(document.querySelectorAll('#template-checkboxes input:checked')).map(input => input.value);
      let extra = '';
      if (userSpecs) {
        extra = Object.entries(selectedSpecs)
          .map(([key, value]) => `${key}: ${value}`)
          .join(', ');
        if (extra) extra = ', ' + extra;
      }
      const promptDisplay = document.getElementById('prompt-display');
      promptDisplay.textContent = selectedTemplates.length > 0
        ? `Generate a design for ${userProductName} in ${selectedTemplates.join(', ')} style${extra}`
        : 'Please select at least one template.';
      showElement('prompt-display');
    }

    // Past Records
    async function loadRecords() {
      const recordsList = document.getElementById('records-list');
      recordsList.innerHTML = '';
      try {
        const generations = await db.collection('generations')
          .where('userId', '==', currentUser.uid)
          .orderBy('createdAt', 'desc')
          .limit(3)
          .get();
        if (generations.empty) {
          showMessage('records-msg', 'No generation records found.', 'info');
          return;
        }
        generations.forEach(doc => {
          const data = doc.data();
          const specsText = data.specifications ? Object.entries(data.specifications).map(([key, value]) => `${key}: ${value}`).join(', ') : '';
          data.images.forEach((item, idx) => {
            const card = document.createElement('div');
            card.className = 'card';
            card.innerHTML = `
              <div class="badge">${data.templates.join(', ')} (${data.productName}${specsText ? ', ' + specsText : ''}) - ${item.provider}</div>
              <img src="${item.url}" alt="Generated image" onload="this.style.opacity=1" style="opacity:0.5; transition:opacity 0.5s"/>
              <button onclick="downloadImage('${item.url}', ${idx})" class="btn">Download</button>
            `;
            recordsList.appendChild(card);
          });
        });
        hideMessage('records-msg');
      } catch (err) {
        showMessage('records-msg', 'Error loading records: ' + err.message, 'error');
      }
    }

    // Create Account (Master)
    async function handleCreateAccount(e) {
      e.preventDefault();
      if (userRole !== 'master') {
        showMessage('create-account-msg', 'Unauthorized access.', 'error');
        return;
      }
      const industryName = document.getElementById('industry-name').value;
      const customIndustryName = document.getElementById('custom-industry-name').value.trim();
      if (industryName === 'other' && !customIndustryName) {
        showMessage('create-account-msg', 'Please enter a custom industry name.', 'error');
        return;
      }
      const effectiveIndustryName = industryName === 'other' ? customIndustryName : industryName;
      const productName = document.getElementById('industry-product').value.trim();
      const specGroups = document.querySelectorAll('#spec-container .spec-group');
      const specifications = {};
      let hasStyle = false;
      for (const group of specGroups) {
        const specId = group.dataset.specId;
        const type = document.getElementById(`spec-${specId}-type`).value;
        if (!type || type === '') continue;
        const customName = document.getElementById(`spec-${specId}-custom-name`)?.value.trim();
        if (type === 'other' && !customName) {
          showMessage('create-account-msg', `Please enter a custom specification name for specification ${specId}.`, 'error');
          return;
        }
        const values = Array.from(document.querySelectorAll(`#spec-${specId}-values .form-group input`))
          .map(input => input.value.trim())
          .filter(value => value);
        if (values.length === 0) {
          showMessage('create-account-msg', `Please enter at least one value for specification ${specId}.`, 'error');
          return;
        }
        const key = type === 'other' ? customName.toLowerCase().replace(/\s+/g, '') : type;
        specifications[key] = values;
        if (key === 'style') hasStyle = true;
      }
      if (!effectiveIndustryName || !productName || productName.length < 2 || !hasStyle) {
        showMessage('create-account-msg', 'Please fill all required fields, including a Style specification with at least one value.', 'error');
        return;
      }
      try {
        showMessage('create-account-msg', 'Generating industry code...', 'info');
        const industryCode = Math.random().toString(36).substring(2, 10).toUpperCase();
        await db.collection('industryCodes').doc(industryCode).set({
          industryName: effectiveIndustryName,
          specifications: specifications,
          productName: productName,
          createdAt: firebase.firestore.FieldValue.serverTimestamp(),
          used: false
        });
        document.getElementById('industry-code').textContent = industryCode;
        showElement('generated-code');
        showMessage('create-account-msg', 'Industry code generated!', 'success');
        document.getElementById('create-account-form').reset();
        document.getElementById('spec-container').innerHTML = `
          <div class="spec-group" data-spec-id="1">
            <div class="form-group">
              <label for="spec-1-type">Specification 1*</label>
              <select id="spec-1-type" required>
                <option value="">Select specification</option>
                <option value="size">Size</option>
                <option value="colorScheme">Color Scheme</option>
                <option value="style">Style</option>
                <option value="tone">Tone</option>
                <option value="dimensions">Dimensions</option>
                <option value="other">Other</option>
              </select>
            </div>
            <div class="form-group hidden" id="spec-1-custom-group">
              <label for="spec-1-custom-name">Custom Specification Name</label>
              <input id="spec-1-custom-name" type="text" placeholder="Enter specification name (e.g., Font)">
            </div>
            <div class="value-group" id="spec-1-values">
              <div class="form-group">
                <label for="spec-1-value-1">Value 1</label>
                <input id="spec-1-value-1" type="text" required placeholder="Enter value (e.g., 1:1)">
              </div>
            </div>
            <button type="button" class="btn btn-add-value" onclick="addValue(1)">Add Value</button>
          </div>
        `;
        setupSpecListeners(1);
      } catch (err) {
        showMessage('create-account-msg', 'Error: ' + err.message, 'error');
      }
    }

    // Event Listeners
    document.addEventListener('DOMContentLoaded', function() {
      document.getElementById('login-form').addEventListener('submit', function(e) {
        e.preventDefault();
        const email = document.getElementById('login-email').value;
        const password = document.getElementById('login-password').value;
        handleLogin(email, password);
      });
      document.getElementById('send-code-btn').addEventListener('click', sendVerificationCode);
      document.getElementById('verify-code-btn').addEventListener('click', verifyCode);
      document.getElementById('register-form').addEventListener('submit', function(e) {
        e.preventDefault();
        completeRegistration();
      });
      document.getElementById('back-to-step1').addEventListener('click', function() {
        hideElement('register-step2');
        showElement('register-step1');
      });
      document.getElementById('back-to-step2').addEventListener('click', function() {
        hideElement('register-step3');
        showElement('register-step2');
      });
      document.getElementById('setup-form').addEventListener('submit', handleSetup);
      document.getElementById('edit-account-btn').addEventListener('click', function() {
        showElement('account-form');
        hideElement('edit-account-btn');
        db.collection('users').doc(currentUser.uid).get().then(doc => {
          if (doc.exists) {
            document.getElementById('account-name').value = doc.data().name || '';
            document.getElementById('account-product').value = doc.data().productName || '';
            if (userRole === 'master') {
              document.getElementById('account-industry').value = doc.data().industryName || '';
            }
          }
        });
      });
      document.getElementById('account-form').addEventListener('submit', handleAccountUpdate);
      document.getElementById('cancel-edit').addEventListener('click', function() {
        hideElement('account-form');
        showElement('edit-account-btn');
      });
      document.getElementById('generate-images-btn').addEventListener('click', generateImages);
      document.getElementById('create-account-form').addEventListener('submit', handleCreateAccount);
      document.getElementById('industry-name').addEventListener('change', function() {
        if (this.value === 'other') {
          showElement('custom-industry-group');
          document.getElementById('custom-industry-name').setAttribute('required', 'true');
        } else {
          hideElement('custom-industry-group');
          document.getElementById('custom-industry-name').removeAttribute('required');
        }
      });
      const addSpecBtn = document.getElementById('add-spec-btn');
      if (addSpecBtn) {
        addSpecBtn.addEventListener('click', addSpecification);
      } else {
        console.warn('Element with ID "add-spec-btn" not found.');
      }
      setupSpecListeners(1);
      document.getElementById('logout-btn').addEventListener('click', handleLogout);
      auth.onAuthStateChanged(user => {
        if (user) {
          currentUser = user;
          checkUserRole().then(() => {
            loadAccountInfo().then(() => {
              showMainApp();
            });
          });
        } else {
          showAuth();
        }
      });
    });
  </script>
</body>
</html>
